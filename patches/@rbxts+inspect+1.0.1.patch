diff --git a/node_modules/@rbxts/inspect/inspect.lua b/node_modules/@rbxts/inspect/inspect.lua
index 27c5ea4..ff79bdf 100644
--- a/node_modules/@rbxts/inspect/inspect.lua
+++ b/node_modules/@rbxts/inspect/inspect.lua
@@ -1,57 +1,130 @@
-local inspect = {}
+local inspect = { Options = {} }
+
+inspect._VERSION = "inspect.lua 3.1.0"
+inspect._URL = "http://github.com/kikito/inspect.lua"
+inspect._DESCRIPTION = "human-readable representations of tables"
+inspect._LICENSE = [[
+  MIT LICENSE
+
+  Copyright (c) 2022 Enrique GarcÃ­a Cota
+
+  Permission is hereby granted, free of charge, to any person obtaining a
+  copy of this software and associated documentation files (the
+  "Software"), to deal in the Software without restriction, including
+  without limitation the rights to use, copy, modify, merge, publish,
+  distribute, sublicense, and/or sell copies of the Software, and to
+  permit persons to whom the Software is furnished to do so, subject to
+  the following conditions:
+
+  The above copyright notice and this permission notice shall be included
+  in all copies or substantial portions of the Software.
+
+  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+]]
+inspect.KEY = setmetatable({}, {
+	__tostring = function()
+		return "inspect.KEY"
+	end,
+})
+inspect.METATABLE = setmetatable({}, {
+	__tostring = function()
+		return "inspect.METATABLE"
+	end,
+})
 
 local tostring = tostring
-
-inspect.KEY = setmetatable({}, {__tostring = function() return "inspect.KEY" end})
-inspect.METATABLE = setmetatable({}, {__tostring = function() return "inspect.METATABLE" end})
+local rep = string.rep
+local match = string.match
+local char = string.char
+local gsub = string.gsub
+local fmt = string.format
+
+local _rawget
+if rawget then
+	_rawget = rawget
+else
+	_rawget = function(t, k)
+		return t[k]
+	end
+end
 
 local function rawpairs(t)
 	return next, t, nil
 end
 
--- Apostrophizes the string if it has quotes, but not aphostrophes
--- Otherwise, it returns a regular quoted string
 local function smartQuote(str)
-	if str:match('"') and not str:match("'") then
+	if match(str, '"') and not match(str, "'") then
 		return "'" .. str .. "'"
 	end
-	return '"' .. str:gsub('"', '\\"') .. '"'
+	return '"' .. gsub(str, '"', '\\"') .. '"'
 end
 
--- \a => "\\a", \0 => "\\0", 31 => "\31"
 local shortControlCharEscapes = {
-	["\a"] = "\\a",  ["\b"] = "\\b", ["\f"] = "\\f", ["\n"] = "\\n",
-	["\r"] = "\\r",  ["\t"] = "\\t", ["\v"] = "\\v"
+	["\a"] = "\\a",
+	["\b"] = "\\b",
+	["\f"] = "\\f",
+	["\n"] = "\\n",
+	["\r"] = "\\r",
+	["\t"] = "\\t",
+	["\v"] = "\\v",
+	["\127"] = "\\127",
 }
-local longControlCharEscapes = {} -- \a => nil, \0 => \000, 31 => \031
-for i=0, 31 do
-	local ch = string.char(i)
+local longControlCharEscapes = { ["\127"] = "\127" }
+for i = 0, 31 do
+	local ch = char(i)
 	if not shortControlCharEscapes[ch] then
-		shortControlCharEscapes[ch] = "\\"..i
-		longControlCharEscapes[ch]  = string.format("\\%03d", i)
+		shortControlCharEscapes[ch] = "\\" .. i
+		longControlCharEscapes[ch] = fmt("\\%03d", i)
 	end
 end
 
 local function escape(str)
-	return (str:gsub("\\", "\\\\")
-				:gsub("(%c)%f[0-9]", longControlCharEscapes)
-				:gsub("%c", shortControlCharEscapes))
+	return (gsub(gsub(gsub(str, "\\", "\\\\"), "(%c)%f[0-9]", longControlCharEscapes), "%c", shortControlCharEscapes))
 end
 
+local luaKeywords = {
+	["and"] = true,
+	["break"] = true,
+	["do"] = true,
+	["else"] = true,
+	["elseif"] = true,
+	["end"] = true,
+	["false"] = true,
+	["for"] = true,
+	["function"] = true,
+	["goto"] = true,
+	["if"] = true,
+	["in"] = true,
+	["local"] = true,
+	["nil"] = true,
+	["not"] = true,
+	["or"] = true,
+	["repeat"] = true,
+	["return"] = true,
+	["then"] = true,
+	["true"] = true,
+	["until"] = true,
+	["while"] = true,
+}
+
 local function isIdentifier(str)
-	return type(str) == "string" and str:match( "^[_%a][_%a%d]*$" )
+	return type(str) == "string" and match(str, "^[_%a][_%a%d]*$") and not luaKeywords[str]
 end
 
+local flr = math.floor
 local function isSequenceKey(k, sequenceLength)
-	return type(k) == "number"
-		and 1 <= k
-		and k <= sequenceLength
-		and math.floor(k) == k
+	return type(k) == "number" and flr(k) == k and 1 <= k and k <= sequenceLength
 end
 
 local defaultTypeOrders = {
-	["number"]   = 1,
-	["boolean"]  = 2,
+	["number"] = 1,
+	["boolean"] = 2,
 	["string"] = 3,
 	["table"] = 4,
 	["function"] = 5,
@@ -62,82 +135,69 @@ local defaultTypeOrders = {
 local function sortKeys(a, b)
 	local ta, tb = type(a), type(b)
 
-	-- strings and numbers are sorted numerically/alphabetically
-	if ta == tb and (ta == "string" or ta == "number") then return a < b end
-
-	local dta, dtb = defaultTypeOrders[ta], defaultTypeOrders[tb]
-	-- Two default types are compared according to the defaultTypeOrders table
-	if dta and dtb then return defaultTypeOrders[ta] < defaultTypeOrders[tb]
-	elseif dta     then return true  -- default types before custom ones
-	elseif dtb     then return false -- custom types after default ones
+	if ta == tb and (ta == "string" or ta == "number") then
+		return a < b
 	end
 
-	-- custom types are sorted out alphabetically
-	return ta < tb
+	local dta = defaultTypeOrders[ta] or 100
+	local dtb = defaultTypeOrders[tb] or 100
+
+	return dta == dtb and ta < tb or dta < dtb
 end
 
--- For implementation reasons, the behavior of rawlen & # is "undefined" when
--- tables aren't pure sequences. So we implement our own # operator.
-local function getSequenceLength(t)
-	local len = 1
-	local v = rawget(t,len)
-	while v ~= nil do
-		len = len + 1
-		v = rawget(t,len)
+local function getKeys(t)
+	local seqLen = 1
+	while _rawget(t, seqLen) ~= nil do
+		seqLen += 1
 	end
-	return len - 1
-end
+	seqLen -= 1
 
-local function getNonSequentialKeys(t)
-	local keys, keysLength = {}, 0
-	local sequenceLength = getSequenceLength(t)
-	for k,_ in rawpairs(t) do
-		if not isSequenceKey(k, sequenceLength) then
-		keysLength = keysLength + 1
-		keys[keysLength] = k
+	local keys, keysLen = {}, 0
+	for k in rawpairs(t) do
+		if not isSequenceKey(k, seqLen) then
+			keysLen += 1
+			keys[keysLen] = k
 		end
 	end
 	table.sort(keys, sortKeys)
-	return keys, keysLength, sequenceLength
+	return keys, keysLen, seqLen
 end
 
-local function countTableAppearances(t, tableAppearances)
-	tableAppearances = tableAppearances or {}
-
-	if type(t) == "table" then
-		if not tableAppearances[t] then
-		tableAppearances[t] = 1
-		for k,v in rawpairs(t) do
-			countTableAppearances(k, tableAppearances)
-			countTableAppearances(v, tableAppearances)
-		end
-		countTableAppearances(getmetatable(t), tableAppearances)
+local function countCycles(x, cycles)
+	if type(x) == "table" then
+		if cycles[x] then
+			cycles[x] += 1
 		else
-		tableAppearances[t] = tableAppearances[t] + 1
+			cycles[x] = 1
+			for k, v in rawpairs(x) do
+				countCycles(k, cycles)
+				countCycles(v, cycles)
+			end
+			countCycles(getmetatable(x), cycles)
 		end
 	end
-
-	return tableAppearances
-end
-
-local copySequence = function(s)
-	local copy, len = {}, #s
-	for i = 1, len do copy[i] = s[i] end
-	return copy, len
 end
 
-local function makePath(path, ...)
-	local keys = {...}
-	local newPath, len = copySequence(path)
-	for i=1, #keys do
-		newPath[len + i] = keys[i]
+local function makePath(path, a, b)
+	local newPath = {}
+	local len = #path
+	for i = 1, len do
+		newPath[i] = path[i]
 	end
+
+	newPath[len + 1] = a
+	newPath[len + 2] = b
+
 	return newPath
 end
 
 local function processRecursive(process, item, path, visited)
-	if item == nil then return nil end
-	if visited[item] then return visited[item] end
+	if item == nil then
+		return nil
+	end
+	if visited[item] then
+		return visited[item]
+	end
 
 	local processed = process(item, path)
 	if type(processed) == "table" then
@@ -145,209 +205,283 @@ local function processRecursive(process, item, path, visited)
 		visited[item] = processedCopy
 		local processedKey
 
-		for k,v in rawpairs(processed) do
-		processedKey = processRecursive(process, k, makePath(path, k, inspect.KEY), visited)
-		if processedKey ~= nil then
-			processedCopy[processedKey] = processRecursive(process, v, makePath(path, processedKey), visited)
-		end
+		for k, v in rawpairs(processed) do
+			processedKey = processRecursive(process, k, makePath(path, k, inspect.KEY), visited)
+			if processedKey ~= nil then
+				processedCopy[processedKey] = processRecursive(process, v, makePath(path, processedKey), visited)
+			end
 		end
 
-		local mt  = processRecursive(process, getmetatable(processed), makePath(path, inspect.METATABLE), visited)
-		if type(mt) ~= "table" then mt = nil end -- ignore not nil/table __metatable field
+		local mt = processRecursive(process, getmetatable(processed), makePath(path, inspect.METATABLE), visited)
+		if type(mt) ~= "table" then
+			mt = nil
+		end
 		setmetatable(processedCopy, mt)
 		processed = processedCopy
 	end
 	return processed
 end
 
-
-
--------------------------------------------------------------------
-
-local Inspector = {}
-local Inspector_mt = {__index = Inspector}
-
-function Inspector:puts(...)
-	local args   = {...}
-	local buffer = self.buffer
-	local len    = #buffer
-	for i=1, #args do
-		len = len + 1
-		buffer[len] = args[i]
-	end
-end
-
-function Inspector:down(f)
-	self.level = self.level + 1
-	f()
-	self.level = self.level - 1
+local function puts(buf, str)
+	buf.n += 1
+	buf[buf.n] = str
 end
 
-function Inspector:tabify()
-	self:puts(self.newline, string.rep(self.indent, self.level))
-end
-
-function Inspector:alreadyVisited(v)
-	return self.ids[v] ~= nil
-end
-
-function Inspector:getId(v)
-	local id = self.ids[v]
-	if not id then
-		local tv = type(v)
-		id              = (self.maxIds[tv] or 0) + 1
-		self.maxIds[tv] = id
-		self.ids[v]     = id
-	end
-	return tostring(id)
-end
-
-function Inspector:putKey(k)
-	if isIdentifier(k) then return self:puts(k) end
-	self:puts("[")
-	self:putValue(k)
-	self:puts("]")
-end
-
-function Inspector:putTable(t)
-	if t == inspect.KEY or t == inspect.METATABLE then
-		self:puts(tostring(t))
-	elseif self:alreadyVisited(t) then
-		self:puts("<table ", self:getId(t), ">")
-	elseif self.level >= self.depth then
-		self:puts("{...}")
-	else
-		if self.tableAppearances[t] > 1 then self:puts("<", self:getId(t), ">") end
-
-		local nonSequentialKeys, nonSequentialKeysLength, sequenceLength = getNonSequentialKeys(t)
-		local mt                = getmetatable(t)
-
-		self:puts("{")
-		self:down(function()
-		local count = 0
-		for i=1, sequenceLength do
-			if count > 0 then self:puts(",") end
-			self:puts(" ")
-			self:putValue(t[i])
-			count = count + 1
-		end
-
-		for i=1, nonSequentialKeysLength do
-			local k = nonSequentialKeys[i]
-			if count > 0 then self:puts(",") end
-			self:tabify()
-			self:putKey(k)
-			self:puts(" = ")
-			self:putValue(t[k])
-			count = count + 1
-		end
-
-		if type(mt) == "table" then
-			if count > 0 then self:puts(",") end
-			self:tabify()
-			self:puts("<metatable> = ")
-			self:putValue(mt)
-		end
-		end)
+local Inspector = {}
 
-		if nonSequentialKeysLength > 0 or type(mt) == "table" then -- result is multi-lined. Justify closing }
-		self:tabify()
-		elseif sequenceLength > 0 then -- array tables have one extra space before closing }
-		self:puts(" ")
-		end
+local Inspector_mt = { __index = Inspector }
 
-		self:puts("}")
-	end
+local function tabify(inspector)
+	puts(inspector.buf, inspector.newline .. rep(inspector.indent, inspector.level))
 end
 
 local function trimStr(s)
-	return string.match(s, "^%s*(.-)%s*$")
+	return match(s, "^%s*(.-)%s*$")
 end
 
 local STRINGABLE_TYPES = {
-	["number"] = tostring,
-	["boolean"] = tostring,
 	["nil"] = tostring,
+	["boolean"] = tostring,
+	["number"] = tostring,
+	["vector"] = function(value)
+		return fmt("Vector3( %s )", tostring(value))
+	end,
+	["cdata"] = tostring,
+	["ctype"] = tostring,
 
 	-- roblox data types
-	["Instance"] = function(value) return string.format("Instance( %s )", value:GetFullName()) end,
-
-	["Axes"] = function(value) return string.format("Axes( %s )", tostring(value)) end,
-	["BrickColor"] = function(value) return string.format("BrickColor( %s )", tostring(value)) end,
-	["CFrame"] = function(value) return string.format("CFrame( %s )", tostring(value)) end,
-	["Color3"] = function(value) return string.format("Color3( %s )", tostring(value)) end,
-	["DockWidgetPluginGuiInfo"] = function(value) return string.format("DockWidgetPluginGuiInfo( %s )", tostring(value)) end,
-	["Faces"] = function(value) return string.format("Faces( %s )", tostring(value)) end,
-	["PathWaypoint"] = function(value) return string.format("PathWaypoint( %s )", tostring(value)) end,
-	["PhysicalProperties"] = function(value) return string.format("PhysicalProperties( %s )", tostring(value)) end,
-	["Random"] = function(value) return "Random" end,
-	["Ray"] = function(value) return string.format("Ray( %s )", tostring(value)) end,
-	["Rect"] = function(value) return string.format("Rect( %s )", tostring(value)) end,
-	["Region3"] = function(value) return string.format("Region3( %s )", tostring(value)) end,
-	["Region3int16"] = function(value) return string.format("Region3int16( %s )", tostring(value)) end,
-	["TweenInfo"] = function(value) return string.format("TweenInfo( %s )", tostring(value)) end,
-	["UDim"] = function(value) return string.format("UDim( %s )", tostring(value)) end,
-	["UDim2"] = function(value) return string.format("UDim2( %s )", tostring(value)) end,
-	["Vector2"] = function(value) return string.format("Vector2( %s )", tostring(value)) end,
-	["Vector2int16"] = function(value) return string.format("Vector2int16( %s )", tostring(value)) end,
-	["Vector3"] = function(value) return string.format("Vector3( %s )", tostring(value)) end,
-	["Vector3int16"] = function(value) return string.format("Vector3int16( %s )", tostring(value)) end,
+	["Axes"] = function(value: Axes)
+		return fmt("Axes( %s )", tostring(value))
+	end,
+	["BrickColor"] = function(value: BrickColor)
+		return fmt("BrickColor( %s )", tostring(value))
+	end,
+	["CFrame"] = function(value: CFrame)
+		return fmt("CFrame( %s )", tostring(value))
+	end,
+	["Color3"] = function(value: Color3)
+		return fmt("Color3( %s )", tostring(value))
+	end,
+	["DateTime"] = function(value: DateTime)
+		return fmt("DateTime( %s )", tostring(value))
+	end,
+	["DockWidgetPluginGuiInfo"] = function(value: DockWidgetPluginGuiInfo)
+		return fmt("DockWidgetPluginGuiInfo( %s )", tostring(value))
+	end,
+	["Enum"] = function(value: Enum)
+		return fmt("Enum( %s )", tostring(value))
+	end,
+	["EnumItem"] = function(value: EnumItem)
+		return fmt("EnumItem( %s %d )", value.Name, value.Value)
+	end,
+	["Enums"] = function(value: Enums)
+		return fmt("Enums( %s )", tostring(value))
+	end,
+	["Faces"] = function(value: Faces)
+		return fmt("Faces( %s )", tostring(value))
+	end,
+	["FloatCurveKey"] = function(value: FloatCurveKey)
+		return fmt("FloatCurveKey( %s )", tostring(value))
+	end,
+	["Font"] = function(value: Font)
+		return fmt("Font( %s )", tostring(value))
+	end,
+	["Instance"] = function(value: Instance)
+		return fmt("Instance( %s )", value:GetFullName())
+	end,
+	["OverlapParams"] = function(value: OverlapParams)
+		return fmt("OverlapParams( %s )", tostring(value))
+	end,
+	["PathWaypoint"] = function(value: PathWaypoint)
+		return fmt("PathWaypoint( %s )", tostring(value))
+	end,
+	["PhysicalProperties"] = function(value: PhysicalProperties)
+		return fmt("PhysicalProperties( %s )", tostring(value))
+	end,
+	["Random"] = function(_value: Random)
+		return "Random"
+	end,
+	["Ray"] = function(value: Ray)
+		return fmt("Ray( %s )", tostring(value))
+	end,
+	["RaycastParams"] = function(value: RaycastParams)
+		return fmt("RaycastParams( %s )", tostring(value))
+	end,
+	["RaycastResult"] = function(value: RaycastResult)
+		return fmt("RaycastResult( %s )", tostring(value))
+	end,
+	["RBXScriptConnection"] = function(value: RBXScriptConnection)
+		return fmt("RBXScriptConnection( %s )", tostring(value))
+	end,
+	["RBXScriptSignal"] = function(value: RBXScriptSignal)
+		return fmt("RBXScriptSignal( %s )", tostring(value))
+	end,
+	["Rect"] = function(value)
+		return fmt("Rect( %s )", tostring(value))
+	end,
+	["Region3"] = function(value)
+		return fmt("Region3( %s )", tostring(value))
+	end,
+	["Region3int16"] = function(value)
+		return fmt("Region3int16( %s )", tostring(value))
+	end,
+	["TweenInfo"] = function(value)
+		return fmt("TweenInfo( %s )", tostring(value))
+	end,
+	["UDim"] = function(value)
+		return fmt("UDim( %s )", tostring(value))
+	end,
+	["UDim2"] = function(value)
+		return fmt("UDim2( %s )", tostring(value))
+	end,
+	["Vector2"] = function(value)
+		return fmt("Vector2( %s )", tostring(value))
+	end,
+	["Vector2int16"] = function(value)
+		return fmt("Vector2int16( %s )", tostring(value))
+	end,
+	["Vector3"] = function(value)
+		return fmt("Vector3( %s )", tostring(value))
+	end,
+	["Vector3int16"] = function(value)
+		return fmt("Vector3int16( %s )", tostring(value))
+	end,
 
 	-- these need to be trimmed?
-	["ColorSequence"] = function(value) return string.format("ColorSequence( %s )", trimStr(tostring(value))) end,
-	["ColorSequenceKeypoint"] = function(value) return string.format("ColorSequenceKeypoint( %s )", trimStr(tostring(value))) end,
-	["NumberRange"] = function(value) return string.format("NumberRange( %s )", trimStr(tostring(value))) end,
-	["NumberSequence"] = function(value) return string.format("NumberSequence( %s )", trimStr(tostring(value))) end,
-	["NumberSequenceKeypoint"] = function(value) return string.format("NumberSequenceKeypoint( %s )", trimStr(tostring(value))) end,
+	["ColorSequence"] = function(value)
+		return fmt("ColorSequence( %s )", trimStr(tostring(value)))
+	end,
+	["ColorSequenceKeypoint"] = function(value)
+		return fmt("ColorSequenceKeypoint( %s )", trimStr(tostring(value)))
+	end,
+	["NumberRange"] = function(value)
+		return fmt("NumberRange( %s )", trimStr(tostring(value)))
+	end,
+	["NumberSequence"] = function(value)
+		return fmt("NumberSequence( %s )", trimStr(tostring(value)))
+	end,
+	["NumberSequenceKeypoint"] = function(value)
+		return fmt("NumberSequenceKeypoint( %s )", trimStr(tostring(value)))
+	end,
 }
 
+function Inspector:getId(v)
+	local id = self.ids[v]
+	local ids = self.ids
+	if not id then
+		local tv = type(v)
+		id = (ids[tv] or 0) + 1
+		ids[v], ids[tv] = id, id
+	end
+	return tostring(id)
+end
+
 function Inspector:putValue(v)
+	local buf = self.buf
 	local tv = typeof(v)
 
 	if tv == "string" then
-		self:puts(smartQuote(escape(v)))
-	elseif tv == "table" then
-		self:putTable(v)
-	else
-		local tostringFunc = STRINGABLE_TYPES[tv]
-		if tostringFunc then
-			self:puts(tostringFunc(v))
+		puts(buf, smartQuote(escape(v)))
+	elseif STRINGABLE_TYPES[tv] then
+		puts(buf, STRINGABLE_TYPES[tv](v))
+	elseif tv == "table" and not self.ids[v] then
+		local t = v
+
+		if t == inspect.KEY or t == inspect.METATABLE then
+			puts(buf, tostring(t))
+		elseif self.level >= self.depth then
+			puts(buf, "{...}")
 		else
-			self:puts("<", tv, " ", self:getId(v), ">")
+			if self.cycles[t] > 1 then
+				puts(buf, fmt("<%d>", self:getId(t)))
+			end
+
+			local keys, keysLen, seqLen = getKeys(t)
+
+			puts(buf, "{")
+			self.level += 1
+
+			for i = 1, seqLen + keysLen do
+				if i > 1 then
+					puts(buf, ",")
+				end
+				if i <= seqLen then
+					puts(buf, " ")
+					self:putValue(t[i])
+				else
+					local k = keys[i - seqLen]
+					tabify(self)
+					if isIdentifier(k) then
+						puts(buf, k)
+					else
+						puts(buf, "[")
+						self:putValue(k)
+						puts(buf, "]")
+					end
+					puts(buf, " = ")
+					self:putValue(t[k])
+				end
+			end
+
+			local mt = getmetatable(t)
+			if type(mt) == "table" then
+				if seqLen + keysLen > 0 then
+					puts(buf, ",")
+				end
+				tabify(self)
+				puts(buf, "<metatable> = ")
+				self:putValue(mt)
+			end
+
+			self.level -= 1
+
+			if keysLen > 0 or type(mt) == "table" then
+				tabify(self)
+			elseif seqLen > 0 then
+				puts(buf, " ")
+			end
+
+			puts(buf, "}")
 		end
+	else
+		puts(buf, fmt("<%s %d>", tv, self:getId(v)))
 	end
 end
 
--------------------------------------------------------------------
-
 function inspect.inspect(root, options)
 	options = options or {}
 
-	local depth   = options.depth   or math.huge
+	local depth = options.depth or math.huge
 	local newline = options.newline or "\n"
-	local indent  = options.indent  or "  "
+	local indent = options.indent or "  "
 	local process = options.process
 
 	if process then
 		root = processRecursive(process, root, {}, {})
 	end
 
+	local cycles = {}
+	countCycles(root, cycles)
+
 	local inspector = setmetatable({
+		buf = { n = 0 },
+		ids = {},
+		cycles = cycles,
 		depth = depth,
 		level = 0,
-		buffer = {},
-		ids = {},
-		maxIds = {},
 		newline = newline,
 		indent = indent,
-		tableAppearances = countTableAppearances(root)
 	}, Inspector_mt)
 
 	inspector:putValue(root)
 
-	return table.concat(inspector.buffer)
+	return table.concat(inspector.buf)
 end
 
-setmetatable(inspect, { __call = function(_, ...) return inspect.inspect(...) end })
+setmetatable(inspect, {
+	__call = function(_, root, options)
+		return inspect.inspect(root, options)
+	end,
+})
 
 return inspect
