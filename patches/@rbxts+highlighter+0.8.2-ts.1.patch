diff --git a/node_modules/@rbxts/highlighter/out/index.d.ts b/node_modules/@rbxts/highlighter/out/index.d.ts
index 96801d1..9da1958 100644
--- a/node_modules/@rbxts/highlighter/out/index.d.ts
+++ b/node_modules/@rbxts/highlighter/out/index.d.ts
@@ -1,21 +1,37 @@
 type TextObject = TextLabel | TextBox
 
+type TokenName =
+	"background"
+	| "iden"
+	| "keyword"
+	| "builtin"
+	| "string"
+	| "number"
+	| "comment"
+	| "operator"
+	| "custom"
+
+type TokenColors = Record<TokenName, Color3 | undefined>
+
 type HighlightProps = {
 	textObject: TextObject
 	src?: string
 	forceUpdate?: boolean
 	lexer?: Lexer
-	customLang?: { [K in string]?: string }
+	customLang?: { [K in string]: string }
 }
 
 type Lexer = {
-	scan: (src: string) => () => LuaTuple<[string, string]>[]
+	scan: (src: string) => () => LuaTuple<[tokenName: TokenName, content: string]>
 	navigator: () => any
 	finished?: boolean
 }
 
 interface Highlighter {
-	highlight: (props: HighlightProps) => void
+	highlight: (props: HighlightProps) => () => void
+	refresh: () => void
+	setTokenColors: (colors: TokenColors) => void
+	getTokenColor: (tokenName: TokenName) => Color3
 	matchStudioSettings: () => void
 }
 
diff --git a/node_modules/@rbxts/highlighter/out/init.lua b/node_modules/@rbxts/highlighter/out/init.lua
index d858aaf..1be8544 100644
--- a/node_modules/@rbxts/highlighter/out/init.lua
+++ b/node_modules/@rbxts/highlighter/out/init.lua
@@ -1,6 +1,6 @@
+local theme = require(script.theme)
 local types = require(script.types)
 local utility = require(script.utility)
-local theme = require(script.theme)
 
 local Highlighter = {
 	defaultLexer = require(script.lexer) :: types.Lexer,
@@ -24,19 +24,13 @@ function Highlighter._getLabelingInfo(textObject: types.TextObject)
 		return
 	end
 
-	local textBounds = utility.getTextBounds(textObject)
-	local textHeight = textBounds.Y / numLines
-
 	return {
 		data = data,
-		numLines = numLines,
-		textBounds = textBounds,
-		textHeight = textHeight,
-		innerAbsoluteSize = utility.getInnerAbsoluteSize(textObject),
+		size = UDim2.new(1, 0, 0, textObject.TextSize),
 		textColor = theme.getColor("iden"),
 		textFont = textObject.FontFace,
 		textSize = textObject.TextSize,
-		labelSize = UDim2.new(1, 0, 0, math.ceil(textHeight)),
+		textWrapped = textObject.TextWrapped,
 	}
 end
 
@@ -49,14 +43,14 @@ function Highlighter._alignLabels(textObject: types.TextObject)
 		return
 	end
 
-	for lineNumber, lineLabel in labelingInfo.data.Labels do
+	for _, lineLabel in labelingInfo.data.Labels do
 		-- Align line label
-		lineLabel.TextColor3 = labelingInfo.textColor
+		lineLabel.AutomaticSize = if labelingInfo.textWrapped then Enum.AutomaticSize.Y else Enum.AutomaticSize.XY
+		lineLabel.Size = labelingInfo.size
 		lineLabel.FontFace = labelingInfo.textFont
+		lineLabel.TextColor3 = labelingInfo.textColor
 		lineLabel.TextSize = labelingInfo.textSize
-		lineLabel.Size = labelingInfo.labelSize
-		lineLabel.Position =
-			UDim2.fromScale(0, labelingInfo.textHeight * (lineNumber - 1) / labelingInfo.innerAbsoluteSize.Y)
+		lineLabel.TextWrapped = labelingInfo.textWrapped
 	end
 end
 
@@ -73,7 +67,7 @@ function Highlighter._populateLabels(props: types.HighlightProps)
 
 	-- Avoid updating when unnecessary
 	local data = Highlighter._textObjectData[textObject]
-	if (data == nil) or (data.Text == src) then
+	if data == nil or data.Text == src then
 		if forceUpdate ~= true then
 			return
 		end
@@ -94,11 +88,9 @@ function Highlighter._populateLabels(props: types.HighlightProps)
 
 	-- Shortcut empty textObjects
 	if src == "" then
-		for l = 1, #lineLabels do
-			if lineLabels[l].Text == "" then
-				continue
-			end
-			lineLabels[l].Text = ""
+		for _, label in lineLabels do
+			label.Text = ""
+			label.Visible = false
 		end
 		return
 	end
@@ -113,25 +105,27 @@ function Highlighter._populateLabels(props: types.HighlightProps)
 			else theme.getColor(token) or idenColor
 
 		local tokenLines = string.split(utility.sanitizeRichText(content), "\n")
-
 		for l, tokenLine in tokenLines do
 			-- Find line label
 			local lineLabel = lineLabels[lineNumber]
 			if not lineLabel then
 				local newLabel = Instance.new("TextLabel")
 				newLabel.Name = "Line_" .. lineNumber
+				newLabel.AutomaticSize = if labelingInfo.textWrapped
+					then Enum.AutomaticSize.Y
+					else Enum.AutomaticSize.XY
+				newLabel.Size = labelingInfo.size
 				newLabel.AutoLocalize = false
 				newLabel.RichText = true
 				newLabel.BackgroundTransparency = 1
+				newLabel.FontFace = labelingInfo.textFont
 				newLabel.Text = ""
 				newLabel.TextXAlignment = Enum.TextXAlignment.Left
 				newLabel.TextYAlignment = Enum.TextYAlignment.Top
 				newLabel.TextColor3 = labelingInfo.textColor
-				newLabel.FontFace = labelingInfo.textFont
 				newLabel.TextSize = labelingInfo.textSize
-				newLabel.Size = labelingInfo.labelSize
-				newLabel.Position =
-					UDim2.fromScale(0, labelingInfo.textHeight * (lineNumber - 1) / labelingInfo.innerAbsoluteSize.Y)
+				newLabel.TextWrapped = labelingInfo.textWrapped
+				newLabel.LayoutOrder = lineNumber
 
 				newLabel.Parent = textObject.SyntaxHighlights
 				lineLabels[lineNumber] = newLabel
@@ -143,6 +137,7 @@ function Highlighter._populateLabels(props: types.HighlightProps)
 				if forceUpdate or lines[lineNumber] ~= previousLines[lineNumber] then
 					-- Set line
 					lineLabels[lineNumber].Text = table.concat(richTextBuffer)
+					lineLabels[lineNumber].Visible = true
 				end
 				-- Move to next line
 				lineNumber += 1
@@ -164,16 +159,19 @@ function Highlighter._populateLabels(props: types.HighlightProps)
 	end
 
 	-- Set final line
-	if richTextBuffer[1] and lineLabels[lineNumber] then
-		lineLabels[lineNumber].Text = table.concat(richTextBuffer)
+	if richTextBuffer[1] then
+		local lineLabel = lineLabels[lineNumber]
+		if lineLabel then
+			lineLabel.Text = table.concat(richTextBuffer)
+			lineLabel.Visible = true
+		end
 	end
 
 	-- Clear unused line labels
 	for l = lineNumber + 1, #lineLabels do
-		if lineLabels[l].Text == "" then
-			continue
-		end
-		lineLabels[l].Text = ""
+		local lineLabel = lineLabels[l]
+		lineLabel.Text = ""
+		lineLabel.Visible = false
 	end
 end
 
@@ -213,6 +211,12 @@ function Highlighter.highlight(props: types.HighlightProps): () -> ()
 		newLineFolder.Name = "SyntaxHighlights"
 		newLineFolder.Parent = textObject
 
+		local uiListLayout = Instance.new("UIListLayout")
+		uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder
+		uiListLayout.FillDirection = Enum.FillDirection.Vertical
+		uiListLayout.Name = "UIListLayout"
+		uiListLayout.Parent = newLineFolder
+
 		lineFolder = newLineFolder
 	end
 
@@ -226,39 +230,45 @@ function Highlighter.highlight(props: types.HighlightProps): () -> ()
 	Highlighter._textObjectData[textObject] = data
 
 	-- Add a cleanup handler for this textObject
-	local connections: { [string]: RBXScriptConnection } = {}
+	local connections: { RBXScriptConnection } = {}
 	local function cleanup()
-		lineFolder:Destroy()
-
 		Highlighter._textObjectData[textObject] = nil
 		Highlighter._cleanups[textObject] = nil
 
-		for _key, connection in connections do
+		for _, connection in connections do
 			connection:Disconnect()
 		end
 		table.clear(connections)
+
+		if lineFolder then
+			lineFolder:Destroy()
+			lineFolder = nil
+		end
 	end
 	Highlighter._cleanups[textObject] = cleanup
 
-	connections["AncestryChanged"] = textObject.AncestryChanged:Connect(function()
-		if textObject.Parent then
-			return
-		end
+	table.insert(
+		connections,
+		textObject.AncestryChanged:Connect(function()
+			if textObject.Parent then
+				return
+			end
 
-		cleanup()
-	end)
-	connections["TextChanged"] = textObject:GetPropertyChangedSignal("Text"):Connect(function()
-		Highlighter._populateLabels(props)
-	end)
-	connections["TextBoundsChanged"] = textObject:GetPropertyChangedSignal("TextBounds"):Connect(function()
-		Highlighter._alignLabels(textObject)
-	end)
-	connections["AbsoluteSizeChanged"] = textObject:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
-		Highlighter._alignLabels(textObject)
-	end)
-	connections["FontFaceChanged"] = textObject:GetPropertyChangedSignal("FontFace"):Connect(function()
-		Highlighter._alignLabels(textObject)
-	end)
+			cleanup()
+		end)
+	)
+	table.insert(
+		connections,
+		textObject:GetPropertyChangedSignal("Text"):Connect(function()
+			Highlighter._populateLabels(props)
+		end)
+	)
+	table.insert(
+		connections,
+		textObject:GetPropertyChangedSignal("FontFace"):Connect(function()
+			Highlighter._alignLabels(textObject)
+		end)
+	)
 
 	-- Populate the labels
 	Highlighter._populateLabels(props)
diff --git a/node_modules/@rbxts/highlighter/out/lexer/language.lua b/node_modules/@rbxts/highlighter/out/lexer/language.lua
index b65a5df..b05ba4d 100644
--- a/node_modules/@rbxts/highlighter/out/lexer/language.lua
+++ b/node_modules/@rbxts/highlighter/out/lexer/language.lua
@@ -167,6 +167,33 @@ local language = {
 			rshift = "function",
 		},
 
+		buffer = {
+			copy = "function",
+			create = "function",
+			fill = "function",
+			fromstring = "function",
+			len = "function",
+			readf32 = "function",
+			readf64 = "function",
+			readi8 = "function",
+			readi16 = "function",
+			readi32 = "function",
+			readu16 = "function",
+			readu32 = "function",
+			readu8 = "function",
+			readstring = "function",
+			tostring = "function",
+			writef32 = "function",
+			writef64 = "function",
+			writei16 = "function",
+			writei32 = "function",
+			writei8 = "function",
+			writestring = "function",
+			writeu16 = "function",
+			writeu32 = "function",
+			writeu8 = "function",
+		},
+
 		coroutine = {
 			close = "function",
 			create = "function",
diff --git a/node_modules/@rbxts/highlighter/out/theme.lua b/node_modules/@rbxts/highlighter/out/theme.lua
index 79efd39..1b38134 100644
--- a/node_modules/@rbxts/highlighter/out/theme.lua
+++ b/node_modules/@rbxts/highlighter/out/theme.lua
@@ -58,7 +58,7 @@ function Theme.matchStudioSettings(refreshCallback: () -> ()): boolean
 		studio.ThemeChanged:Connect(function()
 			studioTheme = studio.Theme
 			Theme.setColors(getTokens())
-            refreshCallback()
+			refreshCallback()
 		end)
 	end)
 	return success
diff --git a/node_modules/@rbxts/highlighter/out/utility.lua b/node_modules/@rbxts/highlighter/out/utility.lua
index 5a6e1c9..ab38e59 100644
--- a/node_modules/@rbxts/highlighter/out/utility.lua
+++ b/node_modules/@rbxts/highlighter/out/utility.lua
@@ -1,5 +1,3 @@
-local types = require(script.Parent.types)
-
 local Utility = {}
 
 function Utility.sanitizeRichText(s: string): string
@@ -18,34 +16,4 @@ function Utility.removeControlChars(s: string): string
 	return string.gsub(s, "[\0\1\2\3\4\5\6\7\8\11\12\13\14\15\16\17\18\19\20\21\22\23\24\25\26\27\28\29\30\31]+", "")
 end
 
-function Utility.getInnerAbsoluteSize(textObject: types.TextObject): Vector2
-	local fullSize = textObject.AbsoluteSize
-
-	local padding: UIPadding? = textObject:FindFirstChildWhichIsA("UIPadding")
-	if padding then
-		local offsetX = padding.PaddingLeft.Offset + padding.PaddingRight.Offset
-		local scaleX = (fullSize.X * padding.PaddingLeft.Scale) + (fullSize.X * padding.PaddingRight.Scale)
-		local offsetY = padding.PaddingTop.Offset + padding.PaddingBottom.Offset
-		local scaleY = (fullSize.Y * padding.PaddingTop.Scale) + (fullSize.Y * padding.PaddingBottom.Scale)
-		return Vector2.new(fullSize.X - (scaleX + offsetX), fullSize.Y - (scaleY + offsetY))
-	else
-		return fullSize
-	end
-end
-
-function Utility.getTextBounds(textObject: types.TextObject): Vector2
-	if textObject.ContentText == "" then
-		return Vector2.zero
-	end
-
-	local textBounds = textObject.TextBounds
-
-	-- Wait for TextBounds to be non-NaN and non-zero because Roblox
-	while (textBounds.Y ~= textBounds.Y) or (textBounds.Y < 1) do
-		task.wait()
-		textBounds = textObject.TextBounds
-	end
-	return textBounds
-end
-
 return Utility
